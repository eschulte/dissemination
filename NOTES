# Notes                                                      -*- org -*-
#+Options: ^:nil

* Notes and Tasks [0/6]
** Relevant Links
*** Twitter-like services
- http://www.twhirl.org/
- http://pownce.com/
- http://www.jaiku.com/
- http://www.sixapart.com/
- http://www.jabber.org/

*** Twitter Clones and RFCs for twitter-like API
   :PROPERTIES:
   :ID:       e6e05b9e-651a-4ab9-9ca8-bf7728f8278d
   :END:
- http://www.hanselman.com/blog/RFCOpenTweetsWhyIsMicrobloggingCentralized.aspx
  (look at the comments)
- http://www.russellbeattie.com/blog/peep-an-open-twitter-server
- http://ilya.netapt.com/blog/archive/2008/05/03/opentweet-distributed-twitter-like-service/
- http://orangejuiceliberationfront.com/building-a-distributed-twitter/
- http://inessential.com/2011/03/11/alternative_to_twitter_
- http://redis.io/topics/twitter-clone

** Use cases
- some from links at [[id:e6e05b9e-651a-4ab9-9ca8-bf7728f8278d][RFC twitter-like API]]
- similar to
  - twitter style information dissemination
  - social information posting and reading

*** find a feed
just use web pages, or integrate into the spec

*** listing microblogs
will need some sort of title, meta-information or summary
(note: meta-information gathering is a common form of warentless surveillance)

*** subscribing
*** replies
*** keyword searching
    :PROPERTIES:
    :CUSTOM_ID: keyword-searching
    :END:

*** hashtags
Apparently these arose organically from the keyword search mechanisms
built into twitter.  So it would seem that this is simply a subset of
[[#keyword-searching]].

Clients may make these clickable on their own.

*** direct addressing
- some form of universal addressing (see [[#overview]] points)
- likely some need for abbreviated names or distributed table linking
  names to URIs

*** CLI friendly
e.g., cat a remote resource and pipe the result into a program.
: cat friend:some/movies.mov|mplayer
** how to identify sub-point resources
e.g., how can I browse the messages available from some end point.
- file system?
- temporal feed?
- must respect the groups and permissions set by that end point

This use case comes from more of a hosted model, where as the rest of
the system is moving into a more push-based model.

** DKIM -- combat spam / something analogous?
- DKIM :: Domain Keys Identified Mail (see http://www.dkim.org/)
     Messages are signed with the public key of the sending domain.
     This prevents forgery of the from domain line.

Would it make sense to do something analogous?

There is already the need for every message to be signed by the
sender, so, a spammer would be forced to use a valid name in the From
field.  I guess in this case the solution would be to throttle the
generation of new names.  Or possibly require a new name to have at
least one signature in the web of trust or something.
** GPGME -- the GPG C API
for a reference implementation, assuming we don't want to just call
gpg on the command line.  See [[info:gpgme#Top]].

** TODO read about "homologous encryption" and "shared secrets"
with respect to GPG public/private key pairs.

** TODO look into GPG's "--hidden-recipient" option.
Does this do anything more than simply encrypt the recipient's name?

** TODO How to hide recipients on encrypted messages
s.t. only a recipient of the messages can see that they are a
recipient, yet they can still efficiently query a server for those
such messages (i.e., either through providing some sort of homomorphic
comparison key, or a black box function which the server can run to
check).
** TODO links
Check these out, all from [[http://jacquesmattheij.com/the-pendulum-swings-again][this article]]
- http://en.wikipedia.org/wiki/Trusted_computing
- http://en.wikipedia.org/wiki/Free_software_movement
- http://en.wikipedia.org/wiki/Phil_Zimmermann
- http://www.fourmilab.ch/documents/digital-imprimatur/

** TODO start to form this idea in an RFC format
- nroff

*** RFC standard sections
Primary goal: clear, unambiguous technical prose.
(see RFC 793)

should start with (1) introduction

required sections
- Security Considerations
- IANA Considerations

** TODO catch these sorts of errors when starting the node server
and give this advice
: setcap 'cap_net_bind_service=+p' $(which node)

for this error
: $ npm start -g dissemination
: 
: > dissemination@0.0.1 start /usr/lib/node_modules/dissemination
: > node server.js
: 
: server running on port 75
: 
: events.js:68
:         throw arguments[1]; // Unhandled 'error' event
:                        ^
: Error: listen EACCES
:     at errnoException (net.js:769:11)
:     at Server._listen2 (net.js:892:19)
:     at listen (net.js:936:10)
:     at Server.listen (net.js:985:5)
:     at Object.<anonymous> (/usr/lib/node_modules/dissemination/server.js:267:28)
:     at Object.<anonymous> (/usr/lib/node_modules/dissemination/server.js:271:4)
:     at Module._compile (module.js:449:26)
:     at Object.Module._extensions..js (module.js:467:10)
:     at Module.load (module.js:356:32)
:     at Function.Module._load (module.js:312:12)
: npm ERR! dissemination@0.0.1 start: `node server.js`
: npm ERR! `sh "-c" "node server.js"` failed with 1
: npm ERR!
: npm ERR! Failed at the dissemination@0.0.1 start script.
: npm ERR! This is most likely a problem with the dissemination package,
: npm ERR! not with npm itself.
: npm ERR! Tell the author that this fails on your system:
: npm ERR!     node server.js
: npm ERR! You can get their info via:
: npm ERR!     npm owner ls dissemination
: npm ERR! There is likely additional logging output above.
: 
: npm ERR! System Linux 3.4.9-1-ARCH
: npm ERR! command "/usr/bin/node" "/usr/bin/npm" "start" "-g" "dissemination"
: npm ERR! cwd /srv/dis
: npm ERR! node -v v0.8.12
: npm ERR! npm -v 1.1.63
: npm ERR! code ELIFECYCLE
: npm ERR! Error: EACCES, open 'npm-debug.log'
: npm ERR!  { [Error: EACCES, open 'npm-debug.log'] errno: 3, code: 'EACCES', path: 'npm-debug.log' }
: npm ERR!
: npm ERR! Please try running this command again as root/Administrator.
: 
: npm ERR! System Linux 3.4.9-1-ARCH
: npm ERR! command "/usr/bin/node" "/usr/bin/npm" "start" "-g" "dissemination"
: npm ERR! cwd /srv/dis
: npm ERR! node -v v0.8.12
: npm ERR! npm -v 1.1.63
: npm ERR! path npm-debug.log
: npm ERR! code EACCES
: npm ERR! errno 3
: npm ERR! stack Error: EACCES, open 'npm-debug.log'
: npm ERR!
: npm ERR! Additional logging details can be found in:
: npm ERR!     /srv/dis/npm-debug.log
: npm ERR! not ok code 0

* Server Notes and Tasks [2/4]
** TODO implement inter-server synchronization
- runs off of a timer
- uses pull and push (or zpull and zpush) to communicate messages

** DONE decide on data exchange format
yup, pure json it is.

- pure json, e.g.,
  : pull ["e558f","fc3a2",...]

- or simplified more command-line syntax
  : pull e558f fc3a2

- or both

** TODO when to do compression
maybe have a encrypted version of each action, e.g.,
- zpush :: is followed by a compressed string of the pushed messages
- zpull :: compresses its results
- zgrep :: compresses its results

** DONE encryption in node (node-gpg)
Wrote C++ bindings to libgpgme see https://github.com/eschulte/node-gpg.

If I need to write C bindings, take a look at https://github.com/chrisa/node-rsa

Will need to wrap GPG.  First get file:src/c/sig.c working, then
write a node API.

See
- http://nodejs.org/docs/latest/api/addons.html <- (how did I not find this earlier!)
- http://nikhilm.bitbucket.org/articles/c_in_my_javascript/c_in_javascript_part_1.html
- http://nikhilm.bitbucket.org/articles/c_in_my_javascript/c_in_javascript_part_2.html
- http://syskall.com/how-to-write-your-own-native-nodejs-extension
- https://github.com/JustinTulloss/zeromq.node/blob/master/binding.cc

* Library
What would application writers want in an API?

Should the API handle indexing/searching or should this be left up to
the servers (this question can probably wait)?

Both clients and servers.
- package :: from JSON message to signed or encrypted and ready for
     dumping through an external compression engine.
- un-package :: take a packed message and return a unpacked -- throw
     an error if signature verification or decryption fails
- handle incoming :: takes a function to call on each incoming
     message (after decompression and un-packaging)


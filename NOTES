# Notes                                                      -*- org -*-
#+Options: ^:nil

* Notes
** Relevant Links
*** Twitter-like services
- http://www.twhirl.org/
- http://pownce.com/
- http://www.jaiku.com/
- http://www.sixapart.com/
- http://www.jabber.org/

*** Twitter Clones and RFCs for twitter-like API
   :PROPERTIES:
   :ID:       e6e05b9e-651a-4ab9-9ca8-bf7728f8278d
   :END:
- http://www.hanselman.com/blog/RFCOpenTweetsWhyIsMicrobloggingCentralized.aspx
  (look at the comments)
- http://www.russellbeattie.com/blog/peep-an-open-twitter-server
- http://ilya.netapt.com/blog/archive/2008/05/03/opentweet-distributed-twitter-like-service/
- http://orangejuiceliberationfront.com/building-a-distributed-twitter/
- http://inessential.com/2011/03/11/alternative_to_twitter_
- http://redis.io/topics/twitter-clone

** Use cases
- some from links at [[id:e6e05b9e-651a-4ab9-9ca8-bf7728f8278d][RFC twitter-like API]]
- similar to
  - twitter style information dissemination
  - social information posting and reading

*** find a feed
just use web pages, or integrate into the spec

*** listing microblogs
will need some sort of title, meta-information or summary
(note: meta-information gathering is a common form of warentless surveillance)

*** subscribing
*** replies
*** keyword searching
    :PROPERTIES:
    :CUSTOM_ID: keyword-searching
    :END:

*** hashtags
Apparently these arose organically from the keyword search mechanisms
built into twitter.  So it would seem that this is simply a subset of
[[#keyword-searching]].

Clients may make these clickable on their own.

*** direct addressing
- some form of universal addressing (see [[#overview]] points)
- likely some need for abbreviated names or distributed table linking
  names to URIs

*** CLI friendly
e.g., cat a remote resource and pipe the result into a program.
: cat friend:some/movies.mov|mplayer
** how to identify sub-point resources
e.g., how can I browse the messages available from some end point.
- file system?
- temporal feed?
- must respect the groups and permissions set by that end point

This use case comes from more of a hosted model, where as the rest of
the system is moving into a more push-based model.

** DKIM -- combat spam / something analogous?
- DKIM :: Domain Keys Identified Mail (see http://www.dkim.org/)
     Messages are signed with the public key of the sending domain.
     This prevents forgery of the from domain line.

Would it make sense to do something analogous?

There is already the need for every message to be signed by the
sender, so, a spammer would be forced to use a valid name in the From
field.  I guess in this case the solution would be to throttle the
generation of new names.  Or possibly require a new name to have at
least one signature in the web of trust or something.
** GPGME -- the GPG C API
for a reference implementation, assuming we don't want to just call
gpg on the command line.  See [[info:gpgme#Top]].
** How to hide recipients on encrypted messages
s.t. only a recipient of the messages can see that they are a
recipient, yet they can still efficiently query a server for those
such messages (i.e., either through providing some sort of homomorphic
comparison key, or a black box function which the server can run to
check).
* Tasks [0/1]
** TODO start to form this idea in an RFC format
- nroff

*** RFC standard sections
Primary goal: clear, unambiguous technical prose.
(see RFC 793)

should start with (1) introduction

required sections
- Security Considerations
- IANA Considerations

* Library
What would application writers want in an API?

Should the API handle indexing/searching or should this be left up to
the servers (this question can probably wait)?

Both clients and servers.
- package :: from JSON message to signed or encrypted and ready for
     dumping through an external compression engine.
- un-package :: take a packed message and return a unpacked -- throw
     an error if signature verification or decryption fails
- handle incoming :: takes a function to call on each incoming
     message (after decompression and un-packaging)


#!/bin/bash
#
# Usage: not executable
# Common functionality to be used in all dis scripts
#

## General helpers
contains(){
    local it="$1"; local item="$2";
    echo "$it"|grep "$item" >/dev/null 2>/dev/null
}

warn(){ echo "$@" 1>&2; }

error(){ echo "$@" 1>&2; exit 1; }

SCRIPT="$0"
help(){
    HELP_TEXT=$(cat "$SCRIPT" \
        |sed '/^[^#]/q' \
        |head -n -1 \
        |tail -n +3 \
        |sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' \
        |cut -c3-)
    error "$HELP_TEXT"
}
if $(contains "$1" "^\-\?\-h\(elp\|$\)");then help; fi

options(){
    eval set -- $(getopt $@|| help && exit 1;)
}

sha1(){
    # TODO: update to reflect the new hashing described in the docs
    local content="$@";
    local length=$(expr length "$content");
    echo -n "\"content\" $length $content"|md5sum|cut -c-40
}

stdinpipe(){
    stdin="$(ls -l /proc/self/fd/0)"
    stdin="${stdin/*-> /}"
    if [[ "$stdin" =~ ^/dev/pts/[0-9] ]];then return 1;else return 0;fi
}

## GPG Helpers
gpg_name(){
    # TODO: setup a mapping between custom user names and gpg IDs
    local signatory="$1";
    if [ -z "$signatory" ];then
        if [ ! -z "$DIS_SIGNATORY" ];then
            signatory="$DIS_SIGNATORY"
        elif [ ! -z "$GPGKEY" ];then
            signatory="$GPGKEY"
        else
            echo "no default GPG key set in GPGKEY"; >&2
        fi
    fi
    echo "$signatory"
}

sign(){
    local gpg_name="$1"; local content="$2";
    echo -n "$content"|gpg --batch --armor --detach-sign --local-user "$gpg_name"
}

verify(){
    local signature="$1"; local signed_data="$2";
    echo "$signature" > /tmp/tmp.sig
    echo -e "$signed_data" > /tmp/tmp.data
    gpg --batch --verify /tmp/tmp.sig /tmp/tmp.data >/dev/null 2>/dev/null
}

encrypt(){
    local hide="$1"; local recipients="$2"; local content="$3";
    if [ -z "$hide" ];then flag="-r";else flag="-R";fi
    gpg_cmd="gpg --batch --armor -e"
    for recipient in $(echo "$recipients");do gpg_cmd+=" $flag $recipient"; done
    echo -n "$content"|eval "$gpg_cmd"
}

## JSON helpers, some explicitly act on the MESSAGE variable
quote(){
    jshon -s "$(if [ -z "$1" ];then cat -;else echo "$1";fi)" 2>/dev/null
}

keys(){
    echo "$JSON"|jshon -k
}

get(){
    local key="$1";
    echo "$JSON"|jshon -e $key -u
}

get_array(){
    local key="$1";
    echo "$JSON"|jshon -e $key -a -u
}

to_array(){
    ARRAY="[]"
    for element in $@;do
        ARRAY="$(echo "$ARRAY"|jshon -s "$element" -i append)"
    done
    echo "$ARRAY"|tr -d '\n'|sed 's/]$/ ]/'
}

to_object(){
    OBJECT="{}"
    while [ ! -z "$1" ];do
        OBJECT="$(echo "$OBJECT"|jshon -s "$2" -i "$1")"
        shift; shift;
    done
    echo "$OBJECT"|tr -d '\n'|sed 's/}$/ }/'
}

show_msg(){
    JSON="$1";
    KEYS=$(keys)
    echo "hash: $(get hash)"
    if $(contains "$KEYS" signatory);then echo "signatory: $(get signatory)";fi
    for key in $(keys|egrep -v "signature|signatory|content|hash");do
        echo "$key: $(get "$key")"
    done
    echo ""
    get content
    echo ""
}

## Database helpers
if_gzip(){
    local cmd="$1";
    eval $(if $(contains "$(file "$BASE")" gzip);then echo $cmd;else echo cat;fi)
}
to_base(){ if_gzip gzip; }
from_base(){ if_gzip gunzip; }

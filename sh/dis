#!/bin/bash
#
# usage: dis cmd [options]
#
# Commands:
#  grep ---- search remote server for key regexp pairs
#  pull ---- pull messages from remote server matching hashes
#  push ---- push messages to a remote server
#
# Options:
#  -H, --host [HOST]        host name of the remote host
#                           default is DIS_HOST or localhost
#  -p, --port [PORT]        port on the remote host
#                           default is DIS_PORT or 4444
#  -j, --json               leave the results as raw JSON
#  -n, --dry-run            print to STDOUT instead of the server
#
# PUSH Options:
#  -s, --sign               sign message
#  -S, --signatory [USER]   use USER as signatory, implies -s
#                           defaults to DIS_SIGNATORY or GPGKEY
#  -e, --encrypt [USER]     encrypt for recipient USER, this options
#                           multiple okay for multiple recipients
#  -i, --hide               hide recipient list from public view
#
. $(dirname $0)/dis-common
cmd=$1; shift
if [ -z $DIS_HOST ];then HOST=localhost;else HOST=$DIS_HOST;fi
if [ -z $DIS_PORT ];then PORT=4444;    else  PORT=$DIS_PORT;fi
SIGN=""; SIGNATORY=""; RECIPIENTS=(); HIDE="";
options -o H:p:jnsS:e:i -l host:,port:,json,dry-run,sign,signatory,encrypt,hide -- "$@"
while [ $# -gt 0 ];do
    case $1 in
        -H|--host)    HOST="$2"; shift;;
        -p|--port)    PORT="$2"; shift;;
        -j|--json)    JSON="yes";;
        -n|--dry-run) DRY="yes";;
        -s|--sign)    SIGN="yes";;
        -S|--signatory)  if [ -z "$SIGNATORY" ];then
                        SIGN="yes";
                        SIGNATORY="$2"; shift;
                      else
                        error "can only specify 1 signatory";
                      fi;;
        -e|--encrypt) RECIPIENTS+="$2"; shift;;
        -i|--hide) HIDE="yes";;
        (--) shift; break;;
        (-*) error "$0: error -- unrecognized option $1";;
        (*)  break;;
    esac
    shift
done

if stdinpipe;then args="$(cat -)";else args="$@";fi
if [ -z "$args" ];then
    if [ "$cmd" == "pull" ];then
        error "Must specify which message hash(es) to pull.";
    elif [ "$cmd" == "push" ];then
        error "Must supply message(s) to push."
    fi
fi

run(){
    case "$cmd" in
        pull) echo -E "pull $(to_array  $args)";;
        push) if [ "$(echo -n "$args"|head -1|jshon -t 2>/dev/null)" == "object" ];then
                echo -E "push [$(echo -n "$args"|tr '\n' ',')]"
              else
                PACK_ARGS=""
                if [ ! -z "$SIGN" ];then PACK_ARGS+=" -s"; fi
                if [ ! -z "$HIDE" ];then PACK_ARGS+=" -i"; fi
                if [ ! -z "$SIGNATORY" ];then PACK_ARGS+=" -S '$SIGNATORY'"; fi
                # TODO: handle multiple recipients
                if [ ! -z "$RECIPIENT" ];then PACK_ARGS+=" -r ${RECIPIENTS[0]}"; fi
                echo -E "push [$(echo "$args"|dis-pack $PACK_ARGS)]"
              fi;;
        grep) echo -E "grep $(to_object $args)";;
        *)    echo "$0: '$cmd' is not a dis comment. See 'dis --help'." >&2
              exit 1;;
    esac
}

if [ ! -z "$DRY" ];then
    run
else
    RESULT="$(run|netcat "$HOST" "$PORT")"
    if [ ! -z "$JSON" ];then
        echo "$RESULT"
    else
        case $cmd in
            pull)
                for i in $(seq $(echo "$RESULT"|jshon -l));do
                    show_msg "$(echo "$RESULT"|jshon -e $(expr $i - 1))"
                done;;
            push|grep)
                COUNT=$(echo "$RESULT"|jshon -l 2>/dev/null)
                if [ -z "$COUNT" ];then
                    echo "ERROR: $RESULT"
                elif [ ! "$COUNT" == "0" ];then
                    echo "$RESULT"|jshon -a -u
                fi;;
        esac
    fi
fi

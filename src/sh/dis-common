#!/bin/bash
#
# Usage: not executable
# Common functionality to be used in all dis scripts
#
contains(){
    local it="$1"; local item="$2";
    echo "$it"|grep "$item" >/dev/null 2>/dev/null
}

SCRIPT="$0"
help(){
    HELP_TEXT=$(cat "$SCRIPT" \
        |sed '/^[^#]/q' \
        |head -n -1 \
        |tail -n +3 \
        |sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' \
        |cut -c3-)
    echo "$HELP_TEXT"
    exit 1
}
if $(contains "$1" "^\-\?\-h");then help; fi

error(){ echo $@ 1>&2; exit 1; }

gpg_name(){
    # TODO: setup a mapping between custom user names and gpg IDs
    local signatory="$1";
    if [ -z "$signatory" ];then
        if [ -z "$GPGKEY" ];then
            echo "no default GPG key set in GPGKEY";
        else
            signatory="$GPGKEY";
        fi
    fi
    echo "$signatory"
}

sign(){
    local gpg_name="$1"; local content="$2";
    echo "$content"|gpg --batch --armor --detach-sign --local-user "$gpg_name"
}

verify(){
    local signature="$1"; local signed_data="$2";
    echo "$signature" > /tmp/tmp.sig
    echo "$signed_data" > /tmp/tmp.data
    gpg --batch --verify /tmp/tmp.sig /tmp/tmp.data >/dev/null 2>/dev/null
}

quote(){
    jshon -s "$(if [ -z "$1" ];then cat -;else echo "$1";fi)" 2>/dev/null
}

sha1(){
    local content="$@";
    local length=$(expr length "$content");
    echo "\"content\" $length $content"|sha1sum|cut -c-40
}

## JSON commands implicitly act on the $MESSAGE variable
keys(){
    echo "$JSON"|jshon -k
}

get(){
    local key="$1";
    echo "$JSON"|jshon -e $key -u
}

get_array(){
    local key="$1";
    echo "$JSON"|jshon -e $key -a -u
}

## Database access helpers
if_gzip(){
    local cmd="$1";
    eval $(if $(contains "$(file "$BASE")" gzip);then echo $cmd;else echo cat;fi)
}
to_base(){ if_gzip gzip; }
from_base(){ if_gzip gunzip; }

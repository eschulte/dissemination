#                                                         -*- org -*-
#+Title: A System/Protocol for information dissemination.

* Overview
  :PROPERTIES:
  :CUSTOM_ID: overview
  :END:

A distributed system through which named or anonymous *users* can
disseminate *messages*.

If Usenet and Twitter had a paranoid child.

** Users
- Any named user must be associated with a PGP public key
- Any non-anonymous message must be signed by its sender
- Should there be another way to associate information with a sender?
  - allow for some other data to be associated
    - real name
    - URL
    - arbitrary text
  - just let them do this with their messages

** Structure of a Message
A message is just a key-value store with some rules about which keys
are required when.

Required keys:
- ID :: a hash of every part of the message *but* the ID key and value

Optional keys:
- Sender :: this value would need two parts, the name of the sender,
     and a PGP signature for every other part of the message aside
     from the ID
- Contents :: holding either plain text or mime-encoded data.
  - Should some sort of mime header be required?
  - Should this be email-compatible?
  - This may be encrypted (should that be a different field)
  - Should this be required
- Target :: this could specify users or groups to target.  This
     should probably just hold another key-value pair in which the
     key could be the type of thing targeted and the value could be
     the identifier.  E.g.,
     | group | alt.foo  |
     | user  | john.doe |
     Should this be extensible or should the keys be fixed.
- Subject :: is this required?
- Time To Live :: does this make sense?

Should misc other keys be allowed? why not

** Distribution of Messages
Along the same lines as Usenet.  Users connect to servers, and servers
exchange information betwixt themselves.

** Organization of Messages
There are three methods for the discovery of messages
- sender
- keyword search
- messages may target a user
- messages may target a group
- arbitrarily extensible headers?
- servers can add their own discovery methods

* Tools
** JSON -- Message serialization
** PGP for message signing, verification, encryption and decryption
** USENET -- distributed submission, storage, persistence and discovery
This is the perfect model for distribution, it just needs:
- faster dissemination (closer to real time than twice-daily batches)
- a less hierarchical system of organization
  (users and keywords rather than newsgroups)

- [[http://tools.ietf.org/html/rfc1036][Standard for Interchange of USENET Messages]]

- keyword search
  - see [[#usenet-archiving-and-searching][Usenet Archiving and Searching]]
- tables: e.g., for association of
  - user names → URL/URI ??
  - user names → public keys

*** Usenet Archiving and Searching
    :PROPERTIES:
    :CUSTOM_ID: usenet-archiving-and-searching
    :END:
- 'lq-text' package, by Liam Quin
- http://en.wikipedia.org/wiki/X-No-Archive

** MIME -- content serialization
will need to allow multipart messages
- being as similar as email would be good
- learning from email would also be good

* Protocol
This is the main goal, but may need to wait until we've formalized the
above and written some reference implementations.

* Notes
** Relevant Links
*** Twitter-like services
- http://www.twhirl.org/
- http://pownce.com/
- http://www.jaiku.com/
- http://www.sixapart.com/
- http://www.jabber.org/

*** Twitter Clones and RFCs for twitter-like API
   :PROPERTIES:
   :ID:       e6e05b9e-651a-4ab9-9ca8-bf7728f8278d
   :END:
- http://www.hanselman.com/blog/RFCOpenTweetsWhyIsMicrobloggingCentralized.aspx
  (look at the comments)
- http://www.russellbeattie.com/blog/peep-an-open-twitter-server
- http://ilya.netapt.com/blog/archive/2008/05/03/opentweet-distributed-twitter-like-service/
- http://orangejuiceliberationfront.com/building-a-distributed-twitter/
- http://inessential.com/2011/03/11/alternative_to_twitter_
- http://redis.io/topics/twitter-clone

** Use cases
- some from links at [[id:e6e05b9e-651a-4ab9-9ca8-bf7728f8278d][RFC twitter-like API]]
- similar to
  - twitter style information dissemination
  - social information posting and reading

*** find a feed
just use web pages, or integrate into the spec

*** listing microblogs
will need some sort of title, meta-information or summary
(note: meta-information gathering is a common form of warentless surveillance)

*** subscribing
*** replies
*** keyword searching
    :PROPERTIES:
    :CUSTOM_ID: keyword-searching
    :END:

*** hashtags
Apparently these arose organically from the keyword search mechanisms
built into twitter.  So it would seem that this is simply a subset of
[[#keyword-searching]].

Clients may make these clickable on their own.

*** direct addressing
- some form of universal addressing (see [[#overview]] points)
- likely some need for abbreviated names or distributed table linking
  names to URIs

*** CLI friendly
e.g., cat a remote resource and pipe the result into a program.
: cat friend:some/movies.mov|mplayer
** how to identify sub-point resources
e.g., how can I browse the messages available from some end point.
- file system?
- temporal feed?
- must respect the groups and permissions set by that end point
